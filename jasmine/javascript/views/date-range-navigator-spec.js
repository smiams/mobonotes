// Generated by CoffeeScript 1.7.1
(function() {
  describe("Date Range Navigator View", function() {
    beforeEach(function() {
      return loadFixtures("/views/navigation.html");
    });
    describe("initialize(data)", function() {
      var navigationDomElement;
      navigationDomElement = {};
      beforeEach(function() {
        return navigationDomElement = $("#navigation");
      });
      it("defaults to the \"single\" pickerMode when the start and end dates are =< 1 day apart", function() {
        var dateRangeNavigator;
        dateRangeNavigator = App.Views.DateRangeNavigator.findAll()[0];
        return expect(dateRangeNavigator.pickerMode).toBe("single");
      });
      return it("defaults to the \"range\" pickerMode when the start and end dates are > 1 day apart", function() {
        var dateRangeNavigator, dateRangeNavigatorDomElement;
        dateRangeNavigatorDomElement = navigationDomElement.find("#date-range-navigator");
        dateRangeNavigatorDomElement.data().endDate = "2014-08-21";
        dateRangeNavigator = App.Views.DateRangeNavigator.findAll()[0];
        return expect(dateRangeNavigator.pickerMode).toBe("range");
      });
    });
    describe("setStartDate(newStartDate)", function() {
      var dateRangeNavigator, newStartDate;
      dateRangeNavigator = {};
      newStartDate = {};
      beforeEach(function() {
        dateRangeNavigator = App.Views.DateRangeNavigator.findAll()[0];
        return dateRangeNavigator.setStartDate("2014-08-19");
      });
      it("sets the startDate instance variable on the DateRangeNavigator object", function() {
        return expect(dateRangeNavigator.startDate).toEqual(moment.utc("2014-08-19", "YYYY-MM-DD"));
      });
      it("sets the startDate instance variable on the DateRangeNavigator object", function() {
        return expect(dateRangeNavigator.formattedStartDate).toBe("2014-08-19");
      });
      it("sets the startDate data attribute on the DOM Element", function() {
        return expect(dateRangeNavigator.domElement.data().startDate).toBe("2014-08-19");
      });
      return it("sets and displays a human-formatted startDate in the DOM", function() {
        return expect(dateRangeNavigator.domElement.find("#start-date").html()).toBe("Aug 19th, 2014");
      });
    });
    describe("setEndDate(newStartDate)", function() {
      var dateRangeNavigator, newEndDate;
      dateRangeNavigator = {};
      newEndDate = {};
      beforeEach(function() {
        dateRangeNavigator = App.Views.DateRangeNavigator.findAll()[0];
        return dateRangeNavigator.setEndDate("2014-08-21");
      });
      it("sets the endDate instance variable on the DateRangeNavigator object", function() {
        return expect(dateRangeNavigator.endDate).toEqual(moment.utc("2014-08-21", "YYYY-MM-DD"));
      });
      it("sets the endDate instance variable on the DateRangeNavigator object", function() {
        return expect(dateRangeNavigator.formattedEndDate).toBe("2014-08-21");
      });
      it("sets the endDate data attribute on the DOM Element", function() {
        return expect(dateRangeNavigator.domElement.data().endDate).toBe("2014-08-21");
      });
      return it("sets and displays a human-formatted endDate in the DOM", function() {
        return expect(dateRangeNavigator.domElement.find("#end-date").html()).toBe(" - Aug 21st, 2014");
      });
    });
    describe("unsetEndDate()", function() {
      var dateRangeNavigator;
      dateRangeNavigator = {};
      beforeEach(function() {
        return dateRangeNavigator = App.Views.DateRangeNavigator.findAll()[0];
      });
      it("nullifies the endDate instance variable on the DateRangeNavigator object", function() {
        dateRangeNavigator.unsetEndDate();
        return expect(dateRangeNavigator.endDate).toBe(null);
      });
      it("nullifies the formattedEndDate instance variable on the DateRangeNavigator object", function() {
        dateRangeNavigator.unsetEndDate();
        return expect(dateRangeNavigator.formattedEndDate).toBe(null);
      });
      return it("clears the human-formatted endDate in the DOM", function() {
        dateRangeNavigator.unsetEndDate();
        return expect(dateRangeNavigator.domElement.find("#end-date").html()).toBe("");
      });
    });
    describe("calculateDayRange()", function() {
      var dateRangeNavigator;
      dateRangeNavigator = {};
      beforeEach(function() {
        return dateRangeNavigator = App.Views.DateRangeNavigator.findAll()[0];
      });
      it("returns 1 for startDate and endDate on the same day", function() {
        return expect(dateRangeNavigator.calculateDayRange()).toBe(1);
      });
      it("returns 2 for startDate and endDate on consecutive days", function() {
        dateRangeNavigator.setEndDate(moment.utc("2014-08-21", "YYYY-MM-DD"));
        return expect(dateRangeNavigator.calculateDayRange()).toBe(2);
      });
      return it("returns 3 for startDate and endDate spanning 3 days", function() {
        dateRangeNavigator.setEndDate(moment.utc("2014-08-22", "YYYY-MM-DD"));
        return expect(dateRangeNavigator.calculateDayRange()).toBe(3);
      });
    });
    describe("_togglePickerMode()", function() {
      var dateRangeNavigator;
      dateRangeNavigator = {};
      beforeEach(function() {
        return dateRangeNavigator = App.Views.DateRangeNavigator.findAll()[0];
      });
      describe("when a date range date is selected", function() {
        beforeEach(function() {
          dateRangeNavigator.pickerMode = "range";
          dateRangeNavigator.datePickerControlsContainer.toggle();
          return dateRangeNavigator._togglePickerMode();
        });
        it("changes the pickerMode to \"single\"", function() {
          return expect(dateRangeNavigator.pickerMode).toBe("single");
        });
        it("changes the change-mode link text to \"choose a date range instead...\"", function() {
          return expect(dateRangeNavigator.domElement.find("#change-mode").html()).toBe("choose a date range instead...");
        });
        it("shows the single date picker", function() {
          return expect(dateRangeNavigator.singleDatePickerContainer).toBeVisible();
        });
        return it("hides the date range picker", function() {
          return expect(dateRangeNavigator.dateRangePickerContainer).not.toBeVisible();
        });
      });
      return describe("when a date range is selected", function() {
        beforeEach(function() {
          dateRangeNavigator.pickerMode = "single";
          dateRangeNavigator.datePickerControlsContainer.toggle();
          return dateRangeNavigator._togglePickerMode();
        });
        it("changes the pickerMode to \"range\"", function() {
          return expect(dateRangeNavigator.pickerMode).toBe("range");
        });
        it("changes the change-mode link text to \"choose a single date instead...\"", function() {
          return expect(dateRangeNavigator.domElement.find("#change-mode").html()).toBe("choose a single date instead...");
        });
        it("shows the date range picker", function() {
          return expect(dateRangeNavigator.dateRangePickerContainer).toBeVisible();
        });
        return it("hides the single date picker", function() {
          return expect(dateRangeNavigator.singleDatePickerContainer).not.toBeVisible();
        });
      });
    });
    describe("getPathForSelectedDateRange()", function() {
      var dateRangeNavigator;
      dateRangeNavigator = {};
      beforeEach(function() {
        return dateRangeNavigator = App.Views.DateRangeNavigator.findAll()[0];
      });
      it("returns the path for a single date", function() {
        return expect(dateRangeNavigator.getPathForSelectedDateRange()).toBe("/dates/2014-08-20");
      });
      return it("returns the path for a date range", function() {
        dateRangeNavigator.setEndDate(moment.utc("2014-08-23", "YYYY-MM-DD"));
        return expect(dateRangeNavigator.getPathForSelectedDateRange()).toBe("/dates/2014-08-20/2014-08-23");
      });
    });
    return describe("_getDataAttributes", function() {
      var dateRangeNavigator;
      dateRangeNavigator = {};
      beforeEach(function() {
        return dateRangeNavigator = new App.Views.DateRangeNavigator;
      });
      it("sets the startDate according to the data attribute on the DOM Element", function() {
        dateRangeNavigator.domElement = $("#date-range-navigator");
        dateRangeNavigator.domElement.data().startDate = "2014-08-15";
        dateRangeNavigator._getDataAttributes(dateRangeNavigator.domElement);
        return expect(dateRangeNavigator.startDate).toEqual(moment.utc("2014-08-15", "YYYY-MM-DD"));
      });
      return it("sets the endDate according to the data attribute on the DOM Element", function() {
        dateRangeNavigator.domElement = $("#date-range-navigator");
        dateRangeNavigator.domElement.data().endDate = "2014-08-30";
        dateRangeNavigator._getDataAttributes(dateRangeNavigator.domElement);
        return expect(dateRangeNavigator.endDate).toEqual(moment.utc("2014-08-30", "YYYY-MM-DD"));
      });
    });
  });

}).call(this);
