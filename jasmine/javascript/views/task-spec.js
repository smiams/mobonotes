// Generated by CoffeeScript 1.7.1
(function() {
  describe("Task View", function() {
    var task;
    task = {};
    App.init();
    beforeEach(function() {
      return loadFixtures("/views/task-list.html");
    });
    describe("_getComponents()", function() {
      beforeEach(function() {
        task = new App.Views.Task;
        return task.domElement = $("#task-item-2");
      });
      it("sets the checkbox to a TaskCheckbox view object", function() {
        var checkboxView;
        checkboxView = App.Views.TaskCheckbox.findAll()[0];
        checkboxView.parent = task;
        task.checkbox = null;
        task._getComponents();
        return expect(task.checkbox).toEqual(checkboxView);
      });
      it("sets the editForm to a TaskEditForm view object", function() {
        var editForm;
        editForm = App.Views.TaskEditForm.findAll()[0];
        editForm.parent = task;
        task.editForm = null;
        task._getComponents();
        return expect(task.editForm).toEqual(editForm);
      });
      it("finds and sets all TaskNotes", function() {
        var taskNotes;
        taskNotes = App.Views.TaskNote.findAll();
        task._getComponents();
        expect(task.notes[0].id).toEqual(taskNotes[0].id);
        return expect(task.notes[1].id).toEqual(taskNotes[1].id);
      });
      it("sets the TaskNoteCreationForm", function() {
        var taskNoteCreationForm;
        taskNoteCreationForm = App.Views.TaskNoteCreationForm.findAll()[0];
        task._getComponents();
        return expect(task.addNoteForm.id).toBe(taskNoteCreationForm.id);
      });
      it("does not get a TaskCheckbox view object if there is no checkbox element in the domElement", function() {
        var domElement;
        domElement = $("<li id='new-task-item'>new task item without a checkbox</li>");
        task = new App.Views.Task({
          domElement: domElement
        });
        task._getComponents();
        return expect(task.checkbox).toBe(void 0);
      });
      it("sets the deleteLink to a dom element", function() {
        task = new App.Views.Task;
        task.domElement = $("#task-item-2");
        task._getComponents();
        return expect(task.deleteLink.html().trim()).toBe("delete");
      });
      return it("sets the editLink to a dom element", function() {
        task = new App.Views.Task;
        task.domElement = $("#task-item-2");
        task._getComponents();
        return expect(task.editLink.html().trim()).toBe("edit");
      });
    });
    describe("toggleOpen()", function() {
      beforeEach(function() {
        return task = new App.Views.Task({
          id: "task-item-2"
        });
      });
      it("adds the 'selected' css class to the domElement", function() {
        task.toggleOpen();
        return expect(task.domElement).toHaveClass("selected");
      });
      it("adds the App.View object to the App.Views.OpenViews array", function() {
        expect(App.Views.OpenViews).not.toContain(task);
        task.toggleOpen();
        return expect(App.Views.OpenViews).toContain(task);
      });
      it("removes the 'selected' css class from the domElement", function() {
        task.toggleOpen();
        expect(task.domElement).toHaveClass("selected");
        task.toggleOpen();
        return expect(task.domElement).not.toHaveClass("selected");
      });
      it("removes the App.View object from the App.Views.OpenViews array", function() {
        expect(App.Views.OpenViews).not.toContain(task);
        task.toggleOpen();
        expect(App.Views.OpenViews).toContain(task);
        task.toggleOpen();
        return expect(App.Views.OpenViews).not.toContain(task);
      });
      return it("only allows one open App.View object at a time", function() {
        var task1;
        task1 = new App.Views.Task({
          id: "task-item-1"
        });
        expect(App.Views.OpenViews.length).toBe(0);
        task1.toggleOpen();
        expect(App.Views.OpenViews.length).toBe(1);
        expect(App.Views.OpenViews[0]).toBe(task1);
        task.toggleOpen();
        expect(App.Views.OpenViews[0]).toBe(task);
        expect(App.Views.OpenViews.length).toBe(1);
        task.toggleOpen();
        return expect(App.Views.OpenViews.length).toBe(0);
      });
    });
    return describe("adding and removing TaskNotes", function() {
      var taskNote, taskNoteDomElement;
      taskNoteDomElement = {};
      taskNote = {};
      beforeEach(function() {
        task = new App.Views.Task({
          id: "task-item-2"
        });
        taskNoteDomElement = $("<div id='test-task-note'>a test task note</div>");
        return taskNote = new App.Views.TaskNote({
          domElement: taskNoteDomElement
        });
      });
      describe("addNote()", function() {
        it("adds a TaskNote object to the Task's list of notes", function() {
          expect(task.notes.length).toBe(2);
          task.addNote(taskNote);
          return expect(task.notes.length).toBe(3);
        });
        return it("appends the TaskNote's domElement to the Task's domElement", function() {
          task.addNote(taskNote);
          return expect(task.domElement).toContainElement("#test-task-note");
        });
      });
      return describe("removeNote()", function() {
        it("removes the TaskNote from the Task's list of notes", function() {
          task.removeNote(task.notes[0]);
          return expect(task.notes.length).toBe(1);
        });
        return it("removes the TaskNote's domElement from the Task's domElement", function() {
          expect(task.domElement).toContainElement("#first-task-note");
          task.removeNote(task.notes[0]);
          expect(task.domElement).not.toContainElement("#first-task-note");
          return expect(task.domElement).toContainElement("#second-task-note");
        });
      });
    });
  });

}).call(this);
