// Generated by CoffeeScript 1.7.1
(function() {
  describe("Task List View", function() {
    var taskDomElement, taskList;
    taskList = {};
    taskDomElement = {};
    beforeEach(function() {
      loadFixtures("/views/task-list.html");
      return taskList = new App.Views.TaskList({
        id: "task-list"
      });
    });
    describe("addTask()", function() {
      it("adds a Task object to the @tasks array", function() {
        var task;
        taskDomElement = $("<li id='new-task-item-1'>new task item</li>");
        task = new App.Views.Task({
          domElement: taskDomElement
        });
        taskList.addTask(task);
        return expect(taskList.tasks[taskList.tasks.length - 1]).toBe(task);
      });
      return it("appends the Task's domElement to the TaskList's domElement", function() {
        var task;
        taskDomElement = $("<li id='new-task-item-2'>new task item</li>");
        task = new App.Views.Task({
          domElement: taskDomElement
        });
        taskList.addTask(task);
        return expect(taskList.domElement.find("#new-task-item-2")).toEqual(taskDomElement);
      });
    });
    return describe("deleteTask", function() {
      it("deletes the Task object from the tasks array", function() {
        expect(taskList.tasks.length).toBe(2);
        taskList.deleteTask(taskList.tasks[1]);
        expect(taskList.tasks.length).toBe(1);
        return expect(taskList.tasks[0].id).toEqual("task-item-1");
      });
      return it("removes the Task domElement from the DOM", function() {
        var domElementToDelete, taskToDelete;
        taskToDelete = taskList.tasks[1];
        domElementToDelete = taskToDelete.domElement.clone();
        taskList.deleteTask(taskToDelete);
        expect(taskToDelete.domElement).not.toBeInDOM();
        return expect(taskList.tasks[0].domElement).toBeInDOM();
      });
    });
  });

}).call(this);
