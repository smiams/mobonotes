// Generated by CoffeeScript 1.7.1
(function() {
  describe("Task Item View", function() {
    var taskItem;
    taskItem = {};
    App.init();
    beforeEach(function() {
      loadFixtures("/views/task-list.html");
      return taskItem = new App.Views.TaskItem({
        id: "task-item-2"
      });
    });
    describe("_getComponents()", function() {
      it("sets the checkbox to a TaskItemCheckbox view object", function() {
        var checkboxView;
        checkboxView = App.Views.TaskItemCheckbox.findAll()[0];
        checkboxView.parent = taskItem;
        taskItem.checkbox = null;
        taskItem._getComponents();
        return expect(taskItem.checkbox).toEqual(checkboxView);
      });
      it("sets the editForm to a TaskEditForm view object", function() {
        var editForm;
        editForm = App.Views.TaskEditForm.findAll()[0];
        editForm.parent = taskItem;
        taskItem.editForm = null;
        taskItem._getComponents();
        return expect(taskItem.editForm).toEqual(editForm);
      });
      it("does not get a TaskItemCheckbox view object if there is no checkbox element in the domElement", function() {
        var domElement;
        domElement = $("<li id='new-task-item'>new task item without a checkbox</li>");
        taskItem = new App.Views.TaskItem({
          domElement: domElement
        });
        taskItem._getComponents();
        return expect(taskItem.checkbox).toBe(void 0);
      });
      it("sets the deleteLink to a dom element", function() {
        taskItem = new App.Views.TaskItem;
        taskItem.domElement = $("#task-item-2");
        taskItem._getComponents();
        return expect(taskItem.deleteLink.html().trim()).toBe("delete");
      });
      return it("sets the editLink to a dom element", function() {
        taskItem = new App.Views.TaskItem;
        taskItem.domElement = $("#task-item-2");
        taskItem._getComponents();
        return expect(taskItem.editLink.html().trim()).toBe("edit");
      });
    });
    return describe("toggleOpen()", function() {
      it("adds the 'selected' css class to the domElement", function() {
        taskItem.toggleOpen();
        return expect(taskItem.domElement).toHaveClass("selected");
      });
      it("adds the App.View object to the App.Views.OpenViews array", function() {
        expect(App.Views.OpenViews).not.toContain(taskItem);
        taskItem.toggleOpen();
        return expect(App.Views.OpenViews).toContain(taskItem);
      });
      it("removes the 'selected' css class from the domElement", function() {
        taskItem.toggleOpen();
        expect(taskItem.domElement).toHaveClass("selected");
        taskItem.toggleOpen();
        return expect(taskItem.domElement).not.toHaveClass("selected");
      });
      it("removes the App.View object from the App.Views.OpenViews array", function() {
        expect(App.Views.OpenViews).not.toContain(taskItem);
        taskItem.toggleOpen();
        expect(App.Views.OpenViews).toContain(taskItem);
        taskItem.toggleOpen();
        return expect(App.Views.OpenViews).not.toContain(taskItem);
      });
      return it("only allows one open App.View object at a time", function() {
        var taskItem1;
        taskItem1 = new App.Views.TaskItem({
          id: "task-item-1"
        });
        expect(App.Views.OpenViews.length).toBe(0);
        taskItem1.toggleOpen();
        expect(App.Views.OpenViews.length).toBe(1);
        expect(App.Views.OpenViews[0]).toBe(taskItem1);
        taskItem.toggleOpen();
        expect(App.Views.OpenViews[0]).toBe(taskItem);
        expect(App.Views.OpenViews.length).toBe(1);
        taskItem.toggleOpen();
        return expect(App.Views.OpenViews.length).toBe(0);
      });
    });
  });

}).call(this);
